From 6c06b7966f71a370f5abc011c6336195eb8ac857 Mon Sep 17 00:00:00 2001
From: Baozhu Zuo <zuobaozhu@gmail.com>
Date: Fri, 15 Sep 2017 14:41:39 +0800
Subject: [PATCH] use pll as default sysclk

---
 arch/arm/boot/dts/rk3229-respeaker-v2.dts |  2 ++
 sound/soc/codecs/ac108.c                  | 51 ++++++++++++++++++++-----------
 2 files changed, 35 insertions(+), 18 deletions(-)

diff --git a/arch/arm/boot/dts/rk3229-respeaker-v2.dts b/arch/arm/boot/dts/rk3229-respeaker-v2.dts
index a0b74ba..843ef39 100644
--- a/arch/arm/boot/dts/rk3229-respeaker-v2.dts
+++ b/arch/arm/boot/dts/rk3229-respeaker-v2.dts
@@ -472,6 +472,7 @@
 		clock-names = "mclk";
 		reg = <0x3b>;
 		data-protocol = <0>;
+		pll-select = <1>;
 		init-data =  /bits/ 8 <
 		/*reg val*/
 		0x39  0x03  /*0x39:TX1 Channel1 ~Channel8 (slot) enable:two ch*/
@@ -498,6 +499,7 @@
 		clock-names = "mclk";
 		reg = <0x35>;
 		data-protocol = <0>;
+		pll-select = <1>;
 		init-data =  /bits/ 8 <
 		/*reg val*/
 		0x39  0x03  /*0x39:TX1 Channel1 ~Channel8 (slot) enable:two ch*/
diff --git a/sound/soc/codecs/ac108.c b/sound/soc/codecs/ac108.c
index 9f0c51e..f81489c 100644
--- a/sound/soc/codecs/ac108.c
+++ b/sound/soc/codecs/ac108.c
@@ -8,7 +8,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-
+#define DEBUG 1
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -54,6 +54,7 @@ struct ac108_priv {
 	struct clk *mclk;
 	unsigned char i2s_mode;
 	unsigned char data_protocol;
+	unsigned char pll_select;
 
 	unsigned char *init_regs;
 	int reg_length;
@@ -829,6 +830,11 @@ static int ac108_configure_clocking(struct ac108_priv *ac108, unsigned int rate)
 				break;
 			}
 		}
+		pr_info("-------------ac108_configure_clocking-------------");
+		pr_info("freq_in=sysclk: %d \n",ac108->sysclk);
+		pr_info("freq_out: %d \n",ac108_pll_div_list[i].freq_out);
+		pr_info("--------------------------------------------------");
+
 		/* 0x11,0x12,0x13,0x14: Config PLL DIV param M1/M2/N/K1/K2 */
 		ac108_multi_chips_update_bits(PLL_CTRL5, 0x1f << PLL_POSTDIV1 | 0x01 << PLL_POSTDIV2, ac108_pll_div.k1 << PLL_POSTDIV1 |
 									  ac108_pll_div.k2 << PLL_POSTDIV2, ac108);
@@ -842,21 +848,15 @@ static int ac108_configure_clocking(struct ac108_priv *ac108, unsigned int rate)
 		/*0x10: PLL Common voltage Enable, PLL Enable,PLL loop divider factor detection enable*/
 		ac108_multi_chips_update_bits(PLL_CTRL1, 0x01 << PLL_EN | 0x01 << PLL_COM_EN | 0x01 << PLL_NDET,
 									  0x1 << PLL_EN | 0x1 << PLL_COM_EN |  0x01 << PLL_NDET, ac108);
-
-		/**
-		 * 0x20: enable pll,pll source from mclk, sysclk source from 
-		 * pll,enable sysclk 
-		 */
-		ac108_multi_chips_update_bits(SYSCLK_CTRL, 0x01 << PLLCLK_EN | 0x03 << PLLCLK_SRC | 0x01 << SYSCLK_SRC | 0x01 << SYSCLK_EN,
-									  0x01 << PLLCLK_EN | 0x00 << PLLCLK_SRC | 0x01 << SYSCLK_SRC | 0x01 << SYSCLK_EN, ac108);
-	}
-	if (ac108->clk_id == SYSCLK_SRC_MCLK) {
-		/**
-		 *0x20: sysclk source from  mclk,enable sysclk 
-		 */
-		ac108_multi_chips_update_bits(SYSCLK_CTRL, 0x01 << PLLCLK_EN | 0x01 << SYSCLK_SRC | 0x01 << SYSCLK_EN,
-									  0x00 << PLLCLK_EN | 0x00 << SYSCLK_SRC | 0x01 << SYSCLK_EN, ac108);
 	}
+
+	/**
+	 * 0x20: enable pll,pll source from pll_select, sysclk source 
+	 * from pll,enable sysclk 
+	 */
+	ac108_multi_chips_update_bits(SYSCLK_CTRL, 0x01 << PLLCLK_EN | 0x03 << PLLCLK_SRC | 0x01 << SYSCLK_SRC | 0x01 << SYSCLK_EN,
+								  0x01 << PLLCLK_EN | ac108->pll_select << PLLCLK_SRC | ac108->clk_id << SYSCLK_SRC | 0x01 << SYSCLK_EN, ac108);
+
 	/*0x21: Module clock enable<I2S, ADC digital, MIC offset Calibration, ADC analog>*/
 	ac108_multi_chips_write(MOD_CLK_EN, 1 << I2S | 1 << ADC_DIGITAL | 1 << MIC_OFFSET_CALIBRATION | 1 << ADC_ANALOG, ac108);
 	/*0x22: Module reset de-asserted<I2S, ADC digital, MIC offset Calibration, ADC analog>*/
@@ -865,7 +865,7 @@ static int ac108_configure_clocking(struct ac108_priv *ac108, unsigned int rate)
 }
 
 static int ac108_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *params, struct snd_soc_dai *dai) {
-	unsigned int i, channels, sample_resolution, rate;
+	unsigned int i, channels, sample_resolution, rate, bit_width;
 	struct snd_soc_codec *codec = dai->codec;
 	struct ac108_priv *ac108 = snd_soc_codec_get_drvdata(codec);
 	rate = 99;
@@ -876,18 +876,23 @@ static int ac108_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_h
 	switch (params_format(params)) {
 	case SNDRV_PCM_FORMAT_S8:
 		sample_resolution = 0;
+		bit_width = 8;
 		break;
 	case SNDRV_PCM_FORMAT_S16_LE:
 		sample_resolution = 2;
+		bit_width = 16;
 		break;
 	case SNDRV_PCM_FORMAT_S20_3LE:
 		sample_resolution = 3;
+		bit_width = 20;
 		break;
 	case SNDRV_PCM_FORMAT_S24_LE:
 		sample_resolution = 4;
+		bit_width = 24;
 		break;
 	case SNDRV_PCM_FORMAT_S32_LE:
 		sample_resolution = 6;
+		bit_width = 32;
 		break;
 	default:
 		dev_err(codec->dev, "AC108 don't supported the sample resolution: %u\n", params_format(params));
@@ -967,7 +972,8 @@ static int ac108_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_h
 	 */
 	ac108_multi_chips_update_bits(ADC_SPRC, 0x0f << ADC_FS_I2S1, ac108_sample_rate[rate].reg_val << ADC_FS_I2S1, ac108);
 
-	ac108_configure_clocking(ac108, rate);
+	ac108->sysclk = params_rate(params)*2*2*bit_width;
+	ac108_configure_clocking(ac108, params_rate(params));
 	return 0;
 }
 
@@ -975,7 +981,10 @@ static int ac108_set_sysclk(struct snd_soc_dai *dai, int clk_id, unsigned int fr
 
 	struct ac108_priv *ac108 = snd_soc_dai_get_drvdata(dai);
 
-	switch (clk_id) {
+	if (ac108->pll_select !=0 ) {
+		clk_id = 1;
+	}
+	switch (ac108->pll_select) {
 	case SYSCLK_SRC_MCLK:
 		ac108_multi_chips_update_bits(SYSCLK_CTRL, 0x1 << SYSCLK_SRC, SYSCLK_SRC_MCLK << SYSCLK_SRC, ac108);
 		break;
@@ -1399,6 +1408,12 @@ static int ac108_i2c_probe(struct i2c_client *i2c,
 	}
 	ac108_global->data_protocol = val;
 
+	ret = of_property_read_u32(np, "pll-select", &val);
+	if (ret) {
+		pr_err("Please set pll-select.\n");
+		return -EINVAL;
+	}
+	ac108_global->pll_select = val;
 
 	pr_err(" i2c_id number :%d\n", (int)(i2c_id->driver_data));
 	pr_err(" ac108  codec_index :%d\n", ac108_global->codec_index);
-- 
2.7.4

